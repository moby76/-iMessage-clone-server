import { User } from "@prisma/client";
import GraphQLUpload from "graphql-upload";
import { CreateUserNameResponse, GraphQLContext } from "../../util/types"; //–ø–æ–¥–∫–ª—é—á–∏–º —Ç–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
import { GraphQLError } from "graphql";


export const userResolvers = {
    Upload: GraphQLUpload,

    Query: {
        searchUsers: async (
            _: any,
            args: { username: string },
            context: GraphQLContext
        ): Promise<Array<User>> => {
            //—Ç–∏–ø User –¥–ª—è TS –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ prisma/client

            //STEP-1 - –ø–æ–ª—É—á–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –¥–ª—è —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∏—è
            const { username: searchedUsername } = args;

            //STEP-2 –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(session) –∏ –ë–î(prisma) –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const { session, prisma } = context;

            //STEP-3 - —Ä–µ–∞–ª–∏–∑—É–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ(–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω/–Ω–µ—Ç)
            if (!session?.user) {
                throw new GraphQLError('Not Autthorized');
            }
            //–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ –ø–æ–ª—É—á–∏–º –∏–º—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ(–≤ —Å–µ—Å—Å–∏–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑.
            const {
                user: { username: myUsername },
            } = session; // –ø—Ä–∏—Å–≤–æ–∏–º –µ–º—É –∞–ª–∏–∞—Å myUsername –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î

            //STEP-4 - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚ùï–∫—Ä–æ–º–µ —Å–µ–±—è‚ùï –ø–æ –∏–º–µ–Ω–∏ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
            try {
                // –Ω–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–≤–Ω–∏–≤ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–ø–æ–ª–µ username –º–æ–¥–µ–ª–∏/–∫–æ–ª–ª–µ–∫—Ü–∏–∏) —Ä–∞–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—é –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑. –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (contains: searchedUsername) –∏ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞ —Å–µ–±—è (not: myUsername). –£–∫–∞–∂–µ–º —á—Ç–æ –ø–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É (mode: 'insensitive' )
                const users = await prisma.user.findMany({
                    where: {
                        username: {
                            // –ø–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª–∏(–∫–æ–ª–ª–µ–∫—Ü–∏–∏) user
                            contains: searchedUsername, // —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ, –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞ –∏–º—è(–¥–∞–∂–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏)
                            not: myUsername, // –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–µ–±—è –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                            mode: "insensitive", //–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                        },
                    },
                });

                // console.log('Users: ', users);

                //–≤–µ—Ä–Ω—ë–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑.
                return users;
            } catch (error: any) {
                console.log("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", error);
                throw new GraphQLError(error?.message);
            }
        },
    },
    Mutation: {
        createUserName: async (
            _: any,
            args: { username: string },
            context: GraphQLContext
        ): Promise<CreateUserNameResponse> => {
            //STEP-1 - –ø–æ–ª—É—á–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –¥–ª—è —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∏—è
            const { username } = args;

            //STEP-2 –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(session) –∏ –ë–î(prisma) –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const { session, prisma } = context;

            //STEP-3 - —Ä–µ–∞–ª–∏–∑—É–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ(–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω/–Ω–µ—Ç)
            if (!session?.user) {
                //NOTE - —ç—Ç–æ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç throw new GraphQLError('Not Autthorized') ‚§¥Ô∏è. –≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É –∫–∞–∫ —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ TS
                return {
                    //–µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω - –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
                    error: "Not Autthorized",
                };
            }
            //–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ –ø–æ–ª—É—á–∏–º id –∏–∑ –ë–î –ø—Ä–∏—Å–≤–æ–∏–≤ –µ–º—É –∏–º—è userId –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ —Ä–µ–∑–æ–ª—å–≤–µ—Ä–∞
            const { id: userId } = session.user;
            // console.log('User', session.user);

            //STEP-4 -
            try {
                // –Ω–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–≤–Ω–∏–≤ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è username –≤ –ë–î(—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ) –∏ –∏–º—è –ø–æ–ª—å–∑. –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                const existingUser = await prisma.user.findUnique({
                    where: { username: username },
                }); //findUnique –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–ª—è–º –≤ –ë–î –∫–æ—Ç–æ—Ä—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ

                // –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å –≤ –î–ë —Ç–æ –≤—ã–≤–µ–¥–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ/–æ—à–∏–±–∫—É
                //NOTE –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ –∫–ª–∏–µ–Ω—Ç–µ(–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                if (existingUser) {
                    return {
                        error: "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ ü§®. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ...",
                    };
                }

                // –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç - —Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è –≤ –ë–î –≤–Ω–µ—Å—è –≤ –Ω–µ–≥–æ —ç—Ç–æ –∏–º—è
                await prisma.user.update({
                    where: { id: userId },
                    data: { username: username },
                });

                console.log("My New username!", username);

                return { success: true };
            } catch (error: any) {
                console.log("CreateUserName Error", error);
                return {
                    error: error?.message,
                };
            }

            // console.log('CONTEXT FROM userResolver', context)
        },
        uploadAvatar: async () => {
            //TODO -
        },
    },
    // Subscription: {
    //     ...
    // }
};
